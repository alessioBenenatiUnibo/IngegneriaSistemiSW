/* Generated by AN DISI Unibo */ 
package it.unibo.nor_2

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Nor_2 ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var in1=false;
				var in2=false;
				var out=!(in1 || in2)
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CoapObserverSupport(myself, "localhost","8015","ctx_flip_flop","nor_1","nor_1_out")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="handle_in_1",cond=whenDispatch("nor_1_out"))
				}	 
				state("in") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_in", 
				 	 					  scope, context!!, "local_tout_"+name+"_in", 500.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t04",targetState="out",cond=whenTimeout("local_tout_"+name+"_in"))   
					transition(edgeName="t05",targetState="handle_in_1",cond=whenDispatch("nor_1_out"))
					transition(edgeName="t06",targetState="handle_in_2",cond=whenDispatch("nor_2_in_2"))
				}	 
				state("out") { //this:State
					action { //it:State
						
									out=!(in1 || in2)
									val OUT=if(out) 1 else 0	
						forward("nor_2_out", "nor_2_out($OUT)" ,"nor_1" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="in", cond=doswitch() )
				}	 
				state("handle_in_1") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("nor_1_out(V)"), Term.createTerm("nor_1_out(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											var X=payloadArg(0)
											in1=(payloadArg(0)=="1")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="in", cond=doswitch() )
				}	 
				state("handle_in_2") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("nor_2_in_2(V)"), Term.createTerm("nor_2_in_2(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											var X=payloadArg(0)
											in2=(payloadArg(0)=="1")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="in", cond=doswitch() )
				}	 
			}
		}
} 
